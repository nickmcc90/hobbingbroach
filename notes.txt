I'm making a website with code because I find this to be an easy way to organize data 
with a clean interface using javascript.

How I set this interface up:
1. Open up VScode
2. Open up a terminal inside VScode
3. Type in the terminal " npm create vite@latest ‘project name’ "
3.5 Choose what you want in the terminal in your react app
3.9 Open up the folder you just created in VScode
4. cd 'project name'
5. npm install
6. npm install node
7. sudo npm install n -g
8. npm run dev
9. Copy and paste the website link into a browser !


How I set this up in github:
1. Went to terminal in Apple computer and navigated to 'project name'
2. git init
3. git add .
4. git commit -m "commit notes"
5. git log (to see that it worked)
6. Go to github and create a new repository
7. Copy the HTTPS link that it gives you
8. Go back to the terminal in apple computer and type git remote add origin "link"
9. Type git remote to see that it worked
10. git push origin main

**If step 10 doesn't work, we need to create a personal access token**
10a. Go to github profile icon
10b. Click settings
10c. Scroll down the left side banner and click developer settings
10d. Click personal access tokens and choose tokens (classic) 
10e. Click generate new token, and choose the classic version
10f. Name the token and only select all the checkmarks for the "repo" category
10g. Choose an expiration date of 90 days preferably. 
10h. Generate the token with the green button
10i. Copy the access token link and paste it in your notes. You'll need it for step 10 again.
10j. Retype git push origin main
10k. When it asks for the password, paste the password given to you by the token.
10l. You can upload versions to github now !!!


How to install tailwindcss into this environment:
1. go to the terminal in VScode and type npm install tailwindcss @tailwindcss/vite
2. In the vite.config.js file, put "tailwindcss()," inside the 'plugins' brackets and put import tailwindcss from '@tailwindcss/vite'
at the top of the file.
3. Go to App.css and index.css and put @import "tailwindcss"; at the top of both.
4. Test out the tailwind on the starter page in App.jsx
5. Gut out index.css and app.css and leave only the top tailwindcss import there.
6. Gut out all the app.jsx stuff within the return brackets and make your own deal.


Now we can start doing this !!

I was looking at my gym-app in the Desktop folder for help and examples for the utils folder
and broaching data.

NOTES

- I want to organize by type, series, ID diameter.
- the length of a bar and quill could be important
- A per_bobby variable that indicates whether the info in the object is only true bc bobby wrote
it and not that we actually tested it.
- A beginning number series variable, and an object for the kind of item it is. The kind of item
it is might have a series attached to it too.
- tolerance for each drawing parameter
- If there is info at all in an object item, there will be a boolean value variable that denotes
so.
- Having a "goes_with" variable to the arbors, bars, adapters, etc.s
- "und" as a type of item means that I don't know what it is.

WHILE AT WORK:
- collect all the info within the utils js files to put into digital form
- come up with colors for each broaching bar based on keyway width. Inscribe a simple number to
further deliniate the same color bars.
- as for the arbors, we can separate them based on item series, and further separate them based on 
"dia_mesh_w_part" size.
- Is there a MOD adapter ? That says MOD on it ?


WHERE I LEFT OFF:
I'm putting more objects in, about to do backside of page 2.
Just finished page 5. Going to keep doing page 6 and on

8/25/25
I need to figure out how to output things from table card. Maybe its because there are
too many objects in the ITEMS object. I need to test something. Maybe without passing anything
into TableCard to see if that is the issue.
If it is the issue, then maybe I can break up the object ? But the object would
need to render chronologically.
**There wasn't actually an issue. All the objects were being loaded.

8/26/25
I need to make a date tracker for the bottom table. I need to take info from the drawings.
Then I need to link the bars and arbors in the physical world to the ones I found in the setup
sheet. Maybe I can write extra thins in the extra_info stat that list the bars to use, and
once we run through a job, I can finalize the bar we use. It'll be so easy because I can just go
to the object in the ITEMS.js file. Wooooooo

I just realized I could have made api calls through a back end to an api with alllll
the drawing data. I don't remember which types of databases to use. I remember express.js
worked with react to use. Ohhhh and I can make my own API with express.js. I don't know how
to have something make api calls to an actual database, not one I make in express.js
